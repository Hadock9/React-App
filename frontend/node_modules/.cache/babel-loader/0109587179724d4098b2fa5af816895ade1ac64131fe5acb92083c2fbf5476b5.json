{"ast":null,"code":"// Валідація Email\nexport const validateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\]\\\\.,;:\\s@\"]+\\.)+[^<>()[\\]\\\\.,;:\\s@\"]{2,})$/i;\n  return re.test(String(email).toLowerCase()) ? '' : 'Email не правильний';\n};\n\n// Валідація пароля\nexport const validatePassword = password => {\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])[A-Za-z0-9!@#$%^&*]{6,16}$/;\n  if (!password) {\n    return 'Поле не може бути пустим';\n  } else if (password.length < 6 || password.length > 16) {\n    return 'Поле має бути від 6 до 16 символів';\n  } else if (!re.test(String(password))) {\n    return 'Пароль повинен містити хоча б одну цифру,одну велику літеру,одну малу літеру і один спеціальний символ (!@#$%^&*)';\n  }\n  return '';\n};\n\n// Валідація повторного пароля\nexport const validateRePassword = (rePassword, password) => {\n  if (!rePassword) {\n    return 'Поле не може бути пустим';\n  } else if (rePassword !== password) {\n    return 'Паролі не збігаються';\n  }\n  return '';\n};\n\n// Валідація імені\nexport const validateName = name => {\n  const re = /^[A-ZА-ЯІЇЄ][a-zа-яіїє'їє]+(?:[- ][A-ZА-ЯІЇЄ][a-zа-яїє'їє]+)?$/;\n  return re.test(name) ? '' : \"Ім'я повинно містити тільки літери, перша літера мaє бути великою, а решта — маленькими, і можливий один пробіл між словами (якщо ім'я подвійне).\";\n};\n// Валідація прізвища\nexport const validateLastName = name => {\n  const re = /^[A-ZА-ЯІЇЄ][a-zа-яіїє'їє]+(?:[- ][A-ZА-ЯІЇЄ][a-zа-яїє'їє]+)?$/;\n  return re.test(name) ? '' : 'Прізвище повинно містити тільки літери, перша літера мaє бути великою, а решта — маленькими, і можливий один пробіл між словами (якщо прізвище подвійне).';\n};\n\n// Валідація умов\nexport const validateConditions = conditions => {\n  return conditions ? '' : 'Ви повинні погодитися з умовами.';\n};\n\n// Валідація дати народження\nexport const validateDate_of_birth = Date_of_birth => {\n  // Перетворюємо рядок дати на об'єкт Date\n  const dateOfBirth = new Date(Date_of_birth);\n  const date_now = new Date();\n\n  // Мінімальна дата (1 січня 1900 року)\n  const date_min = new Date('1900-01-01');\n\n  // Перевірка\n  if (dateOfBirth > date_min && dateOfBirth < date_now) {\n    return ''; // Дата дійсна\n  } else {\n    return 'Дата повинна бути більшою ніж 1900 рік, але меншою ніж сьогодення';\n  }\n};\nexport const validatePhone = Phone => {\n  const re = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n  return re.test(Phone) ? '' : 'Телефон введено не правильно...';\n};\n// Валідація назви країни\nexport const validateCountryName = countryName => {\n  const countryNameTrimmed = countryName.trim();\n  if (!countryNameTrimmed) {\n    return 'Назва країни не може бути пустою';\n  }\n\n  // Регулярний вираз для перевірки, що назва містить лише літери, дефіси та пробіли\n  const regex = /^[a-zA-Zа-яА-ЯіІєЄґҐ' -]+$/;\n  if (!regex.test(countryNameTrimmed)) {\n    return 'Назва країни може містити лише літери, дефіси та пробіли';\n  }\n  if (countryNameTrimmed.length < 2 || countryNameTrimmed.length > 50) {\n    return 'Назва країни повинна містити від 2 до 50 символів';\n  }\n  return '';\n};","map":{"version":3,"names":["validateEmail","email","re","test","String","toLowerCase","validatePassword","password","length","validateRePassword","rePassword","validateName","name","validateLastName","validateConditions","conditions","validateDate_of_birth","Date_of_birth","dateOfBirth","Date","date_now","date_min","validatePhone","Phone","validateCountryName","countryName","countryNameTrimmed","trim","regex"],"sources":["/Users/vasylfalyovskij/Desktop/React-App/frontend/src/js/FormValidation.js"],"sourcesContent":["// Валідація Email\nexport const validateEmail = email => {\n\tconst re =\n\t\t/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\]\\\\.,;:\\s@\"]+\\.)+[^<>()[\\]\\\\.,;:\\s@\"]{2,})$/i\n\treturn re.test(String(email).toLowerCase()) ? '' : 'Email не правильний'\n}\n\n// Валідація пароля\nexport const validatePassword = password => {\n\tconst re =\n\t\t/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])[A-Za-z0-9!@#$%^&*]{6,16}$/\n\n\tif (!password) {\n\t\treturn 'Поле не може бути пустим'\n\t} else if (password.length < 6 || password.length > 16) {\n\t\treturn 'Поле має бути від 6 до 16 символів'\n\t} else if (!re.test(String(password))) {\n\t\treturn 'Пароль повинен містити хоча б одну цифру,одну велику літеру,одну малу літеру і один спеціальний символ (!@#$%^&*)'\n\t}\n\treturn ''\n}\n\n// Валідація повторного пароля\nexport const validateRePassword = (rePassword, password) => {\n\tif (!rePassword) {\n\t\treturn 'Поле не може бути пустим'\n\t} else if (rePassword !== password) {\n\t\treturn 'Паролі не збігаються'\n\t}\n\treturn ''\n}\n\n// Валідація імені\nexport const validateName = name => {\n\tconst re = /^[A-ZА-ЯІЇЄ][a-zа-яіїє'їє]+(?:[- ][A-ZА-ЯІЇЄ][a-zа-яїє'їє]+)?$/\n\treturn re.test(name)\n\t\t? ''\n\t\t: \"Ім'я повинно містити тільки літери, перша літера мaє бути великою, а решта — маленькими, і можливий один пробіл між словами (якщо ім'я подвійне).\"\n}\n// Валідація прізвища\nexport const validateLastName = name => {\n\tconst re = /^[A-ZА-ЯІЇЄ][a-zа-яіїє'їє]+(?:[- ][A-ZА-ЯІЇЄ][a-zа-яїє'їє]+)?$/\n\treturn re.test(name)\n\t\t? ''\n\t\t: 'Прізвище повинно містити тільки літери, перша літера мaє бути великою, а решта — маленькими, і можливий один пробіл між словами (якщо прізвище подвійне).'\n}\n\n// Валідація умов\nexport const validateConditions = conditions => {\n\treturn conditions ? '' : 'Ви повинні погодитися з умовами.'\n}\n\n// Валідація дати народження\nexport const validateDate_of_birth = Date_of_birth => {\n\t// Перетворюємо рядок дати на об'єкт Date\n\tconst dateOfBirth = new Date(Date_of_birth)\n\tconst date_now = new Date()\n\n\t// Мінімальна дата (1 січня 1900 року)\n\tconst date_min = new Date('1900-01-01')\n\n\t// Перевірка\n\tif (dateOfBirth > date_min && dateOfBirth < date_now) {\n\t\treturn '' // Дата дійсна\n\t} else {\n\t\treturn 'Дата повинна бути більшою ніж 1900 рік, але меншою ніж сьогодення'\n\t}\n}\n\nexport const validatePhone = Phone => {\n\tconst re = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/\n\treturn re.test(Phone) ? '' : 'Телефон введено не правильно...'\n}\n// Валідація назви країни\nexport const validateCountryName = countryName => {\n\tconst countryNameTrimmed = countryName.trim()\n\n\tif (!countryNameTrimmed) {\n\t\treturn 'Назва країни не може бути пустою'\n\t}\n\n\t// Регулярний вираз для перевірки, що назва містить лише літери, дефіси та пробіли\n\tconst regex = /^[a-zA-Zа-яА-ЯіІєЄґҐ' -]+$/\n\n\tif (!regex.test(countryNameTrimmed)) {\n\t\treturn 'Назва країни може містити лише літери, дефіси та пробіли'\n\t}\n\n\tif (countryNameTrimmed.length < 2 || countryNameTrimmed.length > 50) {\n\t\treturn 'Назва країни повинна містити від 2 до 50 символів'\n\t}\n\n\treturn ''\n}\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAGC,KAAK,IAAI;EACrC,MAAMC,EAAE,GACP,oHAAoH;EACrH,OAAOA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACH,KAAK,CAAC,CAACI,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,qBAAqB;AACzE,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGC,QAAQ,IAAI;EAC3C,MAAML,EAAE,GACP,8EAA8E;EAE/E,IAAI,CAACK,QAAQ,EAAE;IACd,OAAO,0BAA0B;EAClC,CAAC,MAAM,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAID,QAAQ,CAACC,MAAM,GAAG,EAAE,EAAE;IACvD,OAAO,oCAAoC;EAC5C,CAAC,MAAM,IAAI,CAACN,EAAE,CAACC,IAAI,CAACC,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE;IACtC,OAAO,mHAAmH;EAC3H;EACA,OAAO,EAAE;AACV,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAGA,CAACC,UAAU,EAAEH,QAAQ,KAAK;EAC3D,IAAI,CAACG,UAAU,EAAE;IAChB,OAAO,0BAA0B;EAClC,CAAC,MAAM,IAAIA,UAAU,KAAKH,QAAQ,EAAE;IACnC,OAAO,sBAAsB;EAC9B;EACA,OAAO,EAAE;AACV,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAGC,IAAI,IAAI;EACnC,MAAMV,EAAE,GAAG,gEAAgE;EAC3E,OAAOA,EAAE,CAACC,IAAI,CAACS,IAAI,CAAC,GACjB,EAAE,GACF,mJAAmJ;AACvJ,CAAC;AACD;AACA,OAAO,MAAMC,gBAAgB,GAAGD,IAAI,IAAI;EACvC,MAAMV,EAAE,GAAG,gEAAgE;EAC3E,OAAOA,EAAE,CAACC,IAAI,CAACS,IAAI,CAAC,GACjB,EAAE,GACF,2JAA2J;AAC/J,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAGC,UAAU,IAAI;EAC/C,OAAOA,UAAU,GAAG,EAAE,GAAG,kCAAkC;AAC5D,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAGC,aAAa,IAAI;EACrD;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACF,aAAa,CAAC;EAC3C,MAAMG,QAAQ,GAAG,IAAID,IAAI,CAAC,CAAC;;EAE3B;EACA,MAAME,QAAQ,GAAG,IAAIF,IAAI,CAAC,YAAY,CAAC;;EAEvC;EACA,IAAID,WAAW,GAAGG,QAAQ,IAAIH,WAAW,GAAGE,QAAQ,EAAE;IACrD,OAAO,EAAE,EAAC;EACX,CAAC,MAAM;IACN,OAAO,mEAAmE;EAC3E;AACD,CAAC;AAED,OAAO,MAAME,aAAa,GAAGC,KAAK,IAAI;EACrC,MAAMrB,EAAE,GAAG,2DAA2D;EACtE,OAAOA,EAAE,CAACC,IAAI,CAACoB,KAAK,CAAC,GAAG,EAAE,GAAG,iCAAiC;AAC/D,CAAC;AACD;AACA,OAAO,MAAMC,mBAAmB,GAAGC,WAAW,IAAI;EACjD,MAAMC,kBAAkB,GAAGD,WAAW,CAACE,IAAI,CAAC,CAAC;EAE7C,IAAI,CAACD,kBAAkB,EAAE;IACxB,OAAO,kCAAkC;EAC1C;;EAEA;EACA,MAAME,KAAK,GAAG,4BAA4B;EAE1C,IAAI,CAACA,KAAK,CAACzB,IAAI,CAACuB,kBAAkB,CAAC,EAAE;IACpC,OAAO,0DAA0D;EAClE;EAEA,IAAIA,kBAAkB,CAAClB,MAAM,GAAG,CAAC,IAAIkB,kBAAkB,CAAClB,MAAM,GAAG,EAAE,EAAE;IACpE,OAAO,mDAAmD;EAC3D;EAEA,OAAO,EAAE;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}