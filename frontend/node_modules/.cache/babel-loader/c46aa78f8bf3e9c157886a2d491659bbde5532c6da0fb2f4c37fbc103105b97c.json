{"ast":null,"code":"var _jsxFileName = \"/Users/vasylfalyovskij/Desktop/React-App/frontend/src/pages/Test.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  const [userId, setUserId] = useState('');\n  const [matchId, setMatchId] = useState('');\n  const [amount, setAmount] = useState('');\n  const [odds, setOdds] = useState('');\n  const [status, setStatus] = useState('pending');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const stakeData = {\n      user_id: userId,\n      match_id: matchId,\n      amount: parseFloat(amount),\n      odds: parseFloat(odds),\n      stake_time: new Date().toISOString(),\n      status: status\n    };\n    try {\n      const response = await fetch('http://localhost:4000/api/stake', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(stakeData)\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Stake added successfully:', result);\n      } else {\n        console.error('Failed to add stake:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: userId,\n      onChange: e => setUserId(e.target.value),\n      placeholder: \"User ID\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: matchId,\n      onChange: e => setMatchId(e.target.value),\n      placeholder: \"Match ID\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: e => setAmount(e.target.value),\n      placeholder: \"Amount\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: odds,\n      onChange: e => setOdds(e.target.value),\n      placeholder: \"Odds\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit Stake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n}\n_s(Test, \"4+xG6MW3Bq1V4Hw2DGWA4OmON0I=\");\n_c = Test;\nexport default StakeForm;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Test","_s","userId","setUserId","matchId","setMatchId","amount","setAmount","odds","setOdds","status","setStatus","handleSubmit","e","preventDefault","stakeData","user_id","match_id","parseFloat","stake_time","Date","toISOString","response","fetch","method","headers","body","JSON","stringify","ok","result","json","console","log","error","statusText","onSubmit","children","type","value","onChange","target","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","StakeForm","$RefreshReg$"],"sources":["/Users/vasylfalyovskij/Desktop/React-App/frontend/src/pages/Test.jsx"],"sourcesContent":["import React, { useState } from 'react'\n\nfunction Test() {\n\tconst [userId, setUserId] = useState('')\n\tconst [matchId, setMatchId] = useState('')\n\tconst [amount, setAmount] = useState('')\n\tconst [odds, setOdds] = useState('')\n\tconst [status, setStatus] = useState('pending')\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault()\n\n\t\tconst stakeData = {\n\t\t\tuser_id: userId,\n\t\t\tmatch_id: matchId,\n\t\t\tamount: parseFloat(amount),\n\t\t\todds: parseFloat(odds),\n\t\t\tstake_time: new Date().toISOString(),\n\t\t\tstatus: status,\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch('http://localhost:4000/api/stake', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(stakeData),\n\t\t\t})\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst result = await response.json()\n\t\t\t\tconsole.log('Stake added successfully:', result)\n\t\t\t} else {\n\t\t\t\tconsole.error('Failed to add stake:', response.statusText)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Error:', error)\n\t\t}\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={userId}\n\t\t\t\tonChange={e => setUserId(e.target.value)}\n\t\t\t\tplaceholder='User ID'\n\t\t\t\trequired\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={matchId}\n\t\t\t\tonChange={e => setMatchId(e.target.value)}\n\t\t\t\tplaceholder='Match ID'\n\t\t\t\trequired\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={amount}\n\t\t\t\tonChange={e => setAmount(e.target.value)}\n\t\t\t\tplaceholder='Amount'\n\t\t\t\trequired\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype='number'\n\t\t\t\tvalue={odds}\n\t\t\t\tonChange={e => setOdds(e.target.value)}\n\t\t\t\tplaceholder='Odds'\n\t\t\t\trequired\n\t\t\t/>\n\t\t\t<button type='submit'>Submit Stake</button>\n\t\t</form>\n\t)\n}\n\nexport default StakeForm\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}