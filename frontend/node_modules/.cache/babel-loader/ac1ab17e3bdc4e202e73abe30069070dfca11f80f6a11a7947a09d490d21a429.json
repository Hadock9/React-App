{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useFetchPost = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [failedToFetch, setFailedToFetch] = useState(null);\n  const postData = async ({\n    url,\n    Data\n  }) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Data)\n      });\n      if (!response.ok) {\n        setFailedToFetch(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return {\n        result,\n        response\n      };\n    } catch (err) {\n      setFailedToFetch(err.message);\n      return {\n        error: err.message\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    postData,\n    isLoading,\n    error\n  };\n};\n_s(useFetchPost, \"JG1MiNU0EWw+MDqrSH1ANVE2CHY=\");\nexport default useFetchPost;","map":{"version":3,"names":["useState","useFetchPost","_s","isLoading","setIsLoading","failedToFetch","setFailedToFetch","postData","url","Data","setError","response","fetch","method","headers","body","JSON","stringify","ok","status","result","json","err","message","error"],"sources":["/Users/vasylfalyovskij/Desktop/React-App/frontend/src/hooks/fetch/useFetchPost.jsx"],"sourcesContent":["import { useState } from 'react'\n\nconst useFetchPost = () => {\n\tconst [isLoading, setIsLoading] = useState(false)\n\tconst [failedToFetch, setFailedToFetch] = useState(null)\n\n\tconst postData = async ({ url, Data }) => {\n\t\tsetIsLoading(true)\n\t\tsetError(null)\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(Data),\n\t\t\t})\n\n\t\t\tif (!response.ok) {\n\t\t\t\tsetFailedToFetch(`HTTP error! status: ${response.status}`)\n\t\t\t}\n\n\t\t\tconst result = await response.json()\n\t\t\treturn { result, response }\n\t\t} catch (err) {\n\t\t\tsetFailedToFetch(err.message)\n\t\t\treturn { error: err.message }\n\t\t} finally {\n\t\t\tsetIsLoading(false)\n\t\t}\n\t}\n\n\treturn { postData, isLoading, error }\n}\n\nexport default useFetchPost\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMO,QAAQ,GAAG,MAAAA,CAAO;IAAEC,GAAG;IAAEC;EAAK,CAAC,KAAK;IACzCL,YAAY,CAAC,IAAI,CAAC;IAClBM,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;QACjCK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACR,cAAc,EAAE;QACjB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;QACjBZ,gBAAgB,CAAC,uBAAuBK,QAAQ,CAACQ,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACpC,OAAO;QAAED,MAAM;QAAET;MAAS,CAAC;IAC5B,CAAC,CAAC,OAAOW,GAAG,EAAE;MACbhB,gBAAgB,CAACgB,GAAG,CAACC,OAAO,CAAC;MAC7B,OAAO;QAAEC,KAAK,EAAEF,GAAG,CAACC;MAAQ,CAAC;IAC9B,CAAC,SAAS;MACTnB,YAAY,CAAC,KAAK,CAAC;IACpB;EACD,CAAC;EAED,OAAO;IAAEG,QAAQ;IAAEJ,SAAS;IAAEqB;EAAM,CAAC;AACtC,CAAC;AAAAtB,EAAA,CAhCKD,YAAY;AAkClB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}